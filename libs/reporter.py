from pathlib import Path
from datetime import datetime
from typing import Optional

def generate_report(project_dir: Path, input_url: str, total_assets: int, num_deobfuscated: int, 
                   num_sourcemaps: int, num_sources: int, frameworks: dict, start_time, end_time, logger,
                   detection_summary: Optional[dict] = None):
    report_dir = project_dir / 'report'
    report_dir.mkdir(exist_ok=True)
    report_file = report_dir / 'report.md'
    duration = (end_time - start_time).total_seconds()
    
    with open(report_file, 'w') as f:
        f.write(f"# 🔍 SPA Analysis Report\n\n")
        f.write(f"**Input URL:** {input_url}\n\n")
        
        # Asset Analysis Section
        f.write(f"## 📦 Asset Analysis\n")
        f.write(f"**Total Assets Collected:** {total_assets}\n")
        f.write(f"**Number of Deobfuscated Files:** {num_deobfuscated}\n")
        f.write(f"**Source Maps Found:** {num_sourcemaps}\n")
        f.write(f"**Source Files Extracted:** {num_sources}\n\n")
        
        # Framework Detection Section
        f.write(f"## 🛠️ Framework Detection\n")
        for fw, detected in frameworks.items():
            status = "✅ Yes" if detected else "❌ No"
            f.write(f"- **{fw}:** {status}\n")
        f.write(f"\n")
        
        # Security Analysis Section
        if detection_summary:
            f.write(f"## 🛡️ Security Analysis\n")
            f.write(f"**Total Security Issues Found:** {detection_summary.get('total_detections', 0)}\n")
            f.write(f"**Files with Security Issues:** {detection_summary.get('files_analyzed', 0)}\n\n")
            
            # Severity breakdown
            if detection_summary.get('by_severity'):
                f.write(f"### 🚨 Severity Breakdown\n")
                for severity, count in detection_summary['by_severity'].items():
                    icon = "🔴" if severity == "CRITICAL" else "🟠" if severity == "HIGH" else "🟡" if severity == "MEDIUM" else "🟢"
                    f.write(f"- {icon} **{severity}:** {count}\n")
                f.write(f"\n")
            
            # Category breakdown
            if detection_summary.get('by_category'):
                f.write(f"### 📂 Category Breakdown\n")
                for category, count in detection_summary['by_category'].items():
                    f.write(f"- 📁 **{category}:** {count}\n")
                f.write(f"\n")
            
            # Critical findings
            if detection_summary.get('critical_findings'):
                f.write(f"### ⚠️ Critical Findings\n")
                for finding in detection_summary['critical_findings'][:10]:  # Show top 10
                    f.write(f"- 🔴 **{finding['file']}:**{finding['line']} - {finding['pattern']} ({finding['category']})\n")
                f.write(f"\n")
        
        # Processing Information
        f.write(f"## ⏱️ Processing Information\n")
        f.write(f"**Processing Start:** {start_time}\n")
        f.write(f"**Processing End:** {end_time}\n")
        f.write(f"**Duration:** {duration:.2f} seconds\n\n")
        
        # Recommendations
        f.write(f"## 💡 Recommendations\n")
        if detection_summary and detection_summary.get('total_detections', 0) > 0:
            f.write(f"🔍 **Security Issues Detected:** Review the detailed security report in `sensitive_data.json`\n")
            f.write(f"🛡️ **Immediate Actions:** Remove or secure any hardcoded credentials found\n")
            f.write(f"📊 **Analysis:** Check the CSV export for detailed analysis\n")
        else:
            f.write(f"✅ **No Security Issues:** No sensitive data detected in the analyzed files\n")
        
        f.write(f"\n---\n")
        f.write(f"*Report generated by SPAnalyzeR v2.0*\n")
    
    logger.info(f"Report written to {report_file}") 